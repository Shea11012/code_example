// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"shor_url/ent/tinyurl"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// TinyURL is the model entity for the TinyURL schema.
type TinyURL struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TinyURL) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tinyurl.FieldID:
			values[i] = new(sql.NullInt64)
		case tinyurl.FieldURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TinyURL", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TinyURL fields.
func (tu *TinyURL) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tinyurl.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tu.ID = uint64(value.Int64)
		case tinyurl.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				tu.URL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TinyURL.
// Note that you need to call TinyURL.Unwrap() before calling this method if this TinyURL
// was returned from a transaction, and the transaction was committed or rolled back.
func (tu *TinyURL) Update() *TinyURLUpdateOne {
	return (&TinyURLClient{config: tu.config}).UpdateOne(tu)
}

// Unwrap unwraps the TinyURL entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tu *TinyURL) Unwrap() *TinyURL {
	tx, ok := tu.config.driver.(*txDriver)
	if !ok {
		panic("ent: TinyURL is not a transactional entity")
	}
	tu.config.driver = tx.drv
	return tu
}

// String implements the fmt.Stringer.
func (tu *TinyURL) String() string {
	var builder strings.Builder
	builder.WriteString("TinyURL(")
	builder.WriteString(fmt.Sprintf("id=%v", tu.ID))
	builder.WriteString(", url=")
	builder.WriteString(tu.URL)
	builder.WriteByte(')')
	return builder.String()
}

// TinyURLs is a parsable slice of TinyURL.
type TinyURLs []*TinyURL

func (tu TinyURLs) config(cfg config) {
	for _i := range tu {
		tu[_i].config = cfg
	}
}
